[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro to HPC: ClimRR",
    "section": "",
    "text": "Figure 1: ClimRR: Empowering individuals, governments, and organizations to examine simulated future climate conditions at mid- and end-of-century for a range of climate perils1"
  },
  {
    "objectID": "index.html#additional-projects",
    "href": "index.html#additional-projects",
    "title": "Intro to HPC: ClimRR",
    "section": "Additional Projects",
    "text": "Additional Projects\n\n\n\nProject (and link project description)\nInstitution\nLead\nReviewers\n\n\n\n\nAI-Powered Equity Analysis of Renewable Energy Laws\nANL\nMurat Keceli\nScott Feister, Kellen Leland\n\n\nSolar Power for Affordable Housing through Computational Design of Low-Cost/High-Efficiency Solar Cells\nANL\nAlvaro Vazquez-Mayagoita\nDan Fulton, Helen He\n\n\nEnergy Justice Analysis of Climate Data\nANL\nSam Foreman\nSuzanne Parete-Koon, Scott Feister\n\n\nEnergy Cost for Disadvantaged Populations and Methods of Energy Efficiency and Energy Optimization in Computing Systems\nNERSC\nCharles Lively\nSam Foreman, Wilbur Ouma\n\n\nUnderstanding the Impact of HPC Center Energy Usage on Low-income and Minority Populations\nNERSC\nCharles Lively\nMurat Keceli, Subil Abraham\n\n\nPower Outages and Inequities in Energy Access for Medically Vulnerable Populations\nOLCF\nSubil Abraham\nCharles Lively, Lois McInnes\n\n\nSocioeconomics of Power Outages and Heatwaves\nOLCF\nSuzanne Parete-Koon\nAlvaro Vazquez-Mayagoitia, Lipi Gupta"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Intro to HPC: ClimRR",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nImage Source↩︎\nClimRR was developed by the Center for Climate Resilience and Decision Science (CCRDS) at Argonne National Laboratory in collaboration with AT&T and the United States Department of Homeland Security’s Federal Emergency Management Agency (FEMA). Climate change is increasing the complexity, intensity, and frequency of disasters. Understanding future climate conditions in cities and towns across the United States is necessary to prepare for future climate realities.↩︎"
  },
  {
    "objectID": "qmd/GettingStarted/setup.html",
    "href": "qmd/GettingStarted/setup.html",
    "title": "Getting Started",
    "section": "",
    "text": "To install / setup your environment to run the code for this project we need to\nwhich we describe below."
  },
  {
    "objectID": "qmd/GettingStarted/setup.html#footnotes",
    "href": "qmd/GettingStarted/setup.html#footnotes",
    "title": "Getting Started",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe --system-site-packages flag tells python to include the libraries from our system-wide install in this venv↩︎\nInstallation options:\n\nthe -e flag tells python to perform an editable install (i.e. install package from its path, ., in this case)\nthe .[dev] option says to install the package located here (.), including the development extensions specified in the pyproject.toml file\n\n↩︎"
  },
  {
    "objectID": "qmd/GettingStarted/intro.html",
    "href": "qmd/GettingStarted/intro.html",
    "title": "Climate Analysis with ClimRR",
    "section": "",
    "text": "We use GeoPandas, an open source project to make working with geospatial data in python easier.\nGeoPandas extends the datatypes used by pandas to allow spatial operations on geometric types.\nGeometric operations are performed by shapely.\nGeoPandas further depends on fiona and matplotlib for plotting.\nGeoPandas can read almost any vector-based spatial data format including ESRI shapefile, GeoJSON files and more using the command\nimport geopandas as gpd\ngpd.read_file()\nwhich returns a GeoDataFrame object.\nA GeoDataFrame is a tabular data structure that contains a GeoSeries.\nThe most important property of a GeoDataFrame is that it always has one GeoSeries column that holds a special status.\nThis GeoSeries is referred to as the GeoDataFrame’s “geometry”. When a spatial method is applied to a GeoDataFrame (or a spatial attribute like area is called), this commands will always act on the “geometry” column1.\n\n\n\nWe’ve prepared some helper functions inside src/ClimRR/__init__.py to simplify some of the data analysis tasks.\n\n\n\n\n\n\nWarning\n\n\n\n\n\nMake sure to follow the instructions from Setup and Installation for installing the ClimRR package.\n\n\n\n\n\nImports\nimport matplotlib_inline\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport warnings\n\nimport matplotlib.pyplot as plt\n\nfrom enrich.style import STYLES\nfrom rich.theme import Theme\nfrom rich.console import Console as Console\nfrom ClimRR import get_logger, DATA_DIR, set_plot_style\n\nmatplotlib_inline.backend_inline.set_matplotlib_formats('svg')\n\nset_plot_style()\ntheme = Theme(STYLES)\nlog = get_logger()\nconsole = Console(\n    theme=Theme(STYLES),\n    log_path=False,\n    markup=True,\n    width=512\n)\n\n\nUsing updated plot style for matplotlib"
  },
  {
    "objectID": "qmd/GettingStarted/intro.html#getting-started",
    "href": "qmd/GettingStarted/intro.html#getting-started",
    "title": "Climate Analysis with ClimRR",
    "section": "",
    "text": "We use GeoPandas, an open source project to make working with geospatial data in python easier.\nGeoPandas extends the datatypes used by pandas to allow spatial operations on geometric types.\nGeometric operations are performed by shapely.\nGeoPandas further depends on fiona and matplotlib for plotting.\nGeoPandas can read almost any vector-based spatial data format including ESRI shapefile, GeoJSON files and more using the command\nimport geopandas as gpd\ngpd.read_file()\nwhich returns a GeoDataFrame object.\nA GeoDataFrame is a tabular data structure that contains a GeoSeries.\nThe most important property of a GeoDataFrame is that it always has one GeoSeries column that holds a special status.\nThis GeoSeries is referred to as the GeoDataFrame’s “geometry”. When a spatial method is applied to a GeoDataFrame (or a spatial attribute like area is called), this commands will always act on the “geometry” column1.\n\n\n\nWe’ve prepared some helper functions inside src/ClimRR/__init__.py to simplify some of the data analysis tasks.\n\n\n\n\n\n\nWarning\n\n\n\n\n\nMake sure to follow the instructions from Setup and Installation for installing the ClimRR package.\n\n\n\n\n\nImports\nimport matplotlib_inline\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport warnings\n\nimport matplotlib.pyplot as plt\n\nfrom enrich.style import STYLES\nfrom rich.theme import Theme\nfrom rich.console import Console as Console\nfrom ClimRR import get_logger, DATA_DIR, set_plot_style\n\nmatplotlib_inline.backend_inline.set_matplotlib_formats('svg')\n\nset_plot_style()\ntheme = Theme(STYLES)\nlog = get_logger()\nconsole = Console(\n    theme=Theme(STYLES),\n    log_path=False,\n    markup=True,\n    width=512\n)\n\n\nUsing updated plot style for matplotlib"
  },
  {
    "objectID": "qmd/GettingStarted/intro.html#load-shapefile-and-inspect",
    "href": "qmd/GettingStarted/intro.html#load-shapefile-and-inspect",
    "title": "Climate Analysis with ClimRR",
    "section": "Load Shapefile and inspect",
    "text": "Load Shapefile and inspect\nA shapefile is provided in the ClimRR Data Download (ANL) and can be loaded using geopandas.read_file(...) which will return a geopandas.GeoDataFrame:\n\nshpfile = DATA_DIR.joinpath(\n    \"GridCells2Shapefile/GridCellsShapefile/GridCells.shp\"\n)\nshape = gpd.read_file(shpfile)\n\nEach entry in this table defines a single grid cell (12km x 12 km) which collectively tile the United States.\nWe can get a better understanding of whats going on by looking at the first few entries:\n\nshape.head(n=2)\n\n\n\n\n\n\n\n\nOBJECTID\nCrossmodel\nShape_Leng\nShape_Area\ngeometry\n\n\n\n\n0\n1\nR161C438\n63614.764866\n2.529273e+08\nPOLYGON ((-9530601.177 4726046.614, -9534793.8...\n\n\n1\n2\nR125C222\n61384.219597\n2.355013e+08\nPOLYGON ((-12959076.287 4395610.472, -12974301...\n\n\n\n\n\n\n\nWe see that each row has the following columns: {OBJECTID, Crossmodel, Shape_Leng, Shape_Area, geometry}.\nIn particular, the Crossmodel2 column is a text ID that uniquely identifies an individual cell.\nTo be explicit, let’s look at the WindSpeed.csv file."
  },
  {
    "objectID": "qmd/GettingStarted/intro.html#dealing-with-geometry",
    "href": "qmd/GettingStarted/intro.html#dealing-with-geometry",
    "title": "Climate Analysis with ClimRR",
    "section": "Dealing with Geometry",
    "text": "Dealing with Geometry\nOur shapefile contains a grid of cells (12km x 12km) which tile the continental US.\nWe can inspect a single cell:\n\ncell = shape[shape[\"Crossmodel\"] == 'R146C497']\ncell.head()\n\n\n\n\n\n\n\n\nOBJECTID\nCrossmodel\nShape_Leng\nShape_Area\ngeometry\n\n\n\n\n4\n5\nR146C497\n60142.919468\n2.260731e+08\nPOLYGON ((-8733007.764 4224658.634, -8738250.3...\n\n\n\n\n\n\n\n\nax = cell.boundary.plot()\nax.set_axis_off()\n_ = ax.set_title('Grid from shapefile: 12 x 12 km')\nplt.tight_layout()\n\n\n\n\n\ncell.explore()\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "qmd/GettingStarted/intro.html#load-data-from-.csv-files",
    "href": "qmd/GettingStarted/intro.html#load-data-from-.csv-files",
    "title": "Climate Analysis with ClimRR",
    "section": "Load data from *.csv files",
    "text": "Load data from *.csv files\nEach entry (row) in the .csv has a Crossmodel column (e.g. R146C497) which corresponds to a row in our shapefile that uniquely determines its location on the Earth.\nWe can associate with each of the .csvs the geometry used in our shapefile to position our data on the globe.\n\nimport pandas as pd\ncsvs = [i for i in DATA_DIR.joinpath('csv').rglob('*.csv')]\ndata = {}\nfor f in csvs:\n    key = f.stem\n    tmp = pd.read_csv(f.as_posix())\n    gdf = shape.merge(tmp, on='Crossmodel')\n    gdf['boundary'] = gdf.boundary\n    gdf['centroid'] = gdf.centroid\n    data[key] = gdf\n    console.log(f\"data['{key}'].shape={data[key].shape}\")\n\n[16:13:43] data['FireWeatherIndex_Wildfire'].shape=(62834, 35)                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n\n\n\n           data['HeatingDegreeDays'].shape=(62834, 10)                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \n\n\n\n           data['AnnualTemperatureMinimum'].shape=(62834, 18)                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n\n\n\n           data['SeasonalTemperatureMaximum'].shape=(62834, 27)                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n\n\n\n[16:13:44] data['ConsecutiveDayswithNoPrecipitation'].shape=(55896, 19)                                                                                                                                                                                                                                                                                                                                                                                                                                                         \n\n\n\n           data['SeasonalTemperatureMinimum'].shape=(62834, 27)                                                                                                                                                                                                                                                                                                                                                                                                                                                                 \n\n\n\n           data['WindSpeed'].shape=(62834, 18)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  \n\n\n\n           data['AnnualTemperatureMaximum'].shape=(62834, 18)                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n\n\n\n           data['Precipitation_inches_AnnualTotal'].shape=(55896, 18)"
  },
  {
    "objectID": "qmd/GettingStarted/intro.html#look-at-the-windspeed-data",
    "href": "qmd/GettingStarted/intro.html#look-at-the-windspeed-data",
    "title": "Climate Analysis with ClimRR",
    "section": "Look at the WindSpeed data",
    "text": "Look at the WindSpeed data\nLets inspect one of the entries in our data[(...)] dictionary, WindSpeed, for example:\n\ndata[\"WindSpeed\"].head()\n\n\n\n\n\n\n\n\nOBJECTID\nCrossmodel\nShape_Leng\nShape_Area\ngeometry\nhist\nrcp45_midc\nrcp45_endc\nrcp85_midc\nrcp85_endc\nmid45_hist\nend45_hist\nmid85_hist\nend85_hist\nmid85_45\nend85_45\nboundary\ncentroid\n\n\n\n\n0\n1\nR161C438\n63614.764866\n2.529273e+08\nPOLYGON ((-9530601.177 4726046.614, -9534793.8...\n7.21540\n7.19415\n7.38917\n7.30470\n7.22690\n-0.021256\n0.173764\n0.089297\n0.011499\n0.110553\n-0.162264\nLINESTRING (-9530601.177 4726046.614, -9534793...\nPOINT (-9540369.710 4720470.575)\n\n\n1\n2\nR125C222\n61384.219597\n2.355013e+08\nPOLYGON ((-12959076.287 4395610.472, -12974301...\n8.32612\n8.11360\n8.26028\n8.17420\n8.02081\n-0.212523\n-0.065843\n-0.151919\n-0.305307\n0.060603\n-0.239465\nLINESTRING (-12959076.287 4395610.472, -129743...\nPOINT (-12967596.341 4402326.143)\n\n\n2\n3\nR121C235\n61111.892875\n2.334164e+08\nPOLYGON ((-12754805.395 4355815.951, -12770000...\n8.58573\n8.59828\n8.56058\n8.54483\n8.55421\n0.012547\n-0.025149\n-0.040898\n-0.031519\n-0.053446\n-0.006370\nLINESTRING (-12754805.395 4355815.951, -127700...\nPOINT (-12763132.114 4362694.465)\n\n\n3\n4\nR169C431\n64716.234995\n2.617618e+08\nPOLYGON ((-9605729.481 4879238.815, -9609863.1...\n9.17284\n9.21681\n9.44966\n9.26548\n9.14917\n0.043968\n0.276813\n0.092635\n-0.023674\n0.048667\n-0.300487\nLINESTRING (-9605729.481 4879238.815, -9609863...\nPOINT (-9615619.029 4873482.586)\n\n\n4\n5\nR146C497\n60142.919468\n2.260731e+08\nPOLYGON ((-8733007.764 4224658.634, -8738250.3...\n8.25430\n8.19130\n8.34417\n8.29698\n8.29411\n-0.062996\n0.089874\n0.042684\n0.039807\n0.105680\n-0.050067\nLINESTRING (-8733007.764 4224658.634, -8738250...\nPOINT (-8742676.917 4220233.536)\n\n\n\n\n\n\n\nWe see that each entry has a geometry column, as well as columns for {hist,rcp45_midc, rcp45_endc, rcp85_midc, rcp85_endc, ...} which contains the numerical value of the WindSpeed in each cell under different scenarios at different points in time.\n\nLet’s look at the WindSpeed for our individual cell:\n\ncell_wind = data[\"WindSpeed\"][data[\"WindSpeed\"][\"Crossmodel\"] == 'R146C497']\n\n\nax = cell_wind.plot(column='hist', legend=True)\nax.set_axis_off()\n_ = ax.set_title(\"WindSpeed [Hist] for CELL: R146C497\")"
  },
  {
    "objectID": "qmd/GettingStarted/intro.html#footnotes",
    "href": "qmd/GettingStarted/intro.html#footnotes",
    "title": "Climate Analysis with ClimRR",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe “geometry” column – no matter its name – can be accessed through the geometry attribute (gdf.geometry), and the name of the geometry column can be found by typing gdf.geometry.name.↩︎\nTruncated name for “Crossmodel_CellName”.↩︎"
  },
  {
    "objectID": "qmd/ClimRR/analysis.html",
    "href": "qmd/ClimRR/analysis.html",
    "title": "Intro to HPC Bootcamp",
    "section": "",
    "text": "CitationBibTeX citation:@misc{foreman2023,\n  author = {Foreman, Sam},\n  date = {2023-07-14},\n  url = {https://saforem2.github.io/climate-analysis},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nForeman, Sam. 2023. Intro to HPC: Climate Analysis with ClimRR.\nhttps://saforem2.github.io/climate-analysis."
  },
  {
    "objectID": "qmd/GettingStarted/tree.html",
    "href": "qmd/GettingStarted/tree.html",
    "title": "",
    "section": "",
    "text": "📂 ClimRR Data Download/\n┣━━ 📂 GridCells2Shapefile/\n┃   ┣━━ 📄 GridCells2.cpg\n┃   ┣━━ 📄 GridCells2.dbf\n┃   ┣━━ 📄 GridCells2.prj\n┃   ┣━━ 📄 GridCells2.sbn\n┃   ┣━━ 📄 GridCells2.sbx\n┃   ┣━━ 📄 GridCells2.shp\n┃   ┣━━ 📄 GridCells2.shp.xml\n┃   ┗━━ 📄 GridCells2.shx\n┣━━ 📂 GridCellsShapefile/\n┃   ┣━━ 📄 GridCells.cpg\n┃   ┣━━ 📄 GridCells.dbf\n┃   ┣━━ 📄 GridCells.prj\n┃   ┣━━ 📄 GridCells.sbn\n┃   ┣━━ 📄 GridCells.sbx\n┃   ┣━━ 📄 GridCells.shp\n┃   ┣━━ 📄 GridCells.shp.xml\n┃   ┗━━ 📄 GridCells.shx\n┣━━ 📄 AnnualTemperatureMaximum.csv\n┣━━ 📄 AnnualTemperatureMinimum.csv\n┣━━ 📄 ClimRR Metadata and Data Dictionary.pdf\n┣━━ 📄 ConsecutiveDayswithNoPrecipitation.csv\n┣━━ 📄 FireWeatherIndex_Wildfire.csv\n┣━━ 📄 GridCells2Shapefile.zip\n┣━━ 📄 GridCellsShapefile.zip\n┣━━ 📄 HeatingDegreeDays.csv\n┣━━ 📄 Precipitation_inches_AnnualTotal.csv\n┣━━ 📄 README.txt\n┣━━ 📄 SeasonalTemperatureMaximum.csv\n┣━━ 📄 SeasonalTemperatureMinimum.csv\n┗━━ 📄 WindSpeed.csv\n\n\n\nCitationBibTeX citation:@misc{foreman2023,\n  author = {Foreman, Sam},\n  date = {2023-07-14},\n  url = {https://saforem2.github.io/climate-analysis},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nForeman, Sam. 2023. Intro to HPC: Climate Analysis with ClimRR.\nhttps://saforem2.github.io/climate-analysis."
  },
  {
    "objectID": "qmd/GettingStarted/chicago.html",
    "href": "qmd/GettingStarted/chicago.html",
    "title": "Chicago Analysis",
    "section": "",
    "text": "Imports\n%matplotlib inline\nimport matplotlib_inline\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport warnings\n\nimport matplotlib.pyplot as plt\n\n# from enrich.console import Console, get_theme\nmatplotlib_inline.backend_inline.set_matplotlib_formats('svg')\nfrom ClimRR import get_logger, DATA_DIR, set_plot_style\nset_plot_style()\nlog = get_logger('ClimRR')\nfrom rich.console import Console as rConsole\nfrom enrich.style import STYLES\nfrom rich.theme import Theme\n\ntheme = Theme(STYLES)\nlog = get_logger('ClimRR')\nconsole = rConsole(theme=theme, log_path=False, markup=True)\n\n\nUsing updated plot style for matplotlib\n\n\n\n\nfrom ClimRR import load_shapefile, load_csvs\n\nshape = load_shapefile()\ndata = load_csvs(shape)\n\ndata['FireWeatherIndex_Wildfire'].shape=(62834, 35)\n\n\n\ndata['HeatingDegreeDays'].shape=(62834, 10)\n\n\n\ndata['AnnualTemperatureMinimum'].shape=(62834, 18)\n\n\n\ndata['SeasonalTemperatureMaximum'].shape=(62834, 27)\n\n\n\ndata['ConsecutiveDayswithNoPrecipitation'].shape=(55896, 19)\n\n\n\ndata['SeasonalTemperatureMinimum'].shape=(62834, 27)\n\n\n\ndata['WindSpeed'].shape=(62834, 18)\n\n\n\ndata['AnnualTemperatureMaximum'].shape=(62834, 18)\n\n\n\ndata['Precipitation_inches_AnnualTotal'].shape=(55896, 18)\n\n\n\n\nsquare = shape[shape[\"Crossmodel\"] == 'R146C497']\nfig, ax = plt.subplots(figsize=(4, 3))\nax = square.boundary.plot(ax=ax)\nax.set_axis_off()\nplt.tight_layout()\n\n\n\n\n\nimport geopandas as gpd\nimport geodatasets\nchipop = gpd.read_file(\n    geodatasets.get_path('geoda.chicago_commpop')\n).to_crs(square.crs)\nchihealth = gpd.read_file(\n    geodatasets.get_path('geoda.chicago_health')\n).to_crs(square.crs)\nchigroc = gpd.read_file(\n    geodatasets.get_path('geoda.groceries')\n).to_crs(square.crs)\n\nWe can inspect this data, looking at the chipop.boundary for example\n\nchipop['boundary'] = chipop.boundary\n\n\nfig, ax = plt.subplots(figsize=(10, 7))\nax = chipop.boundary.plot(linewidth=0.8, color='#838383', ax=ax)\nax.set_axis_off()\n_ = ax.set_title('Chicago Neighborhoods')\n\n\n\n\nWhich we can use to plot the population (by neighborhood, in this case):\n\nfig, ax = plt.subplots(figsize=(10, 7))\nax = chipop.to_crs(square.crs).plot(column=\"POP2010\", legend=True, ax=ax)\nax.set_axis_off()\n_ = ax.set_title(f\"Chicago population by Neighborhood [2010]\")\n\n\n\n\n\nwtown = chipop[chipop[\"community\"] == 'WEST TOWN']\nhumboldt = chipop[chipop[\"community\"] == 'HUMBOLDT PARK']\n\n\nhumboldt.explore()\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nfig, ax = plt.subplots(figsize=(10, 7))\nax = humboldt.overlay(shape, how='intersection').plot(ax=ax, legend=True)\nax = (\n    hp := chipop[chipop['community'] == 'HUMBOLDT PARK'].overlay(\n        shape,\n        how='intersection'\n    )\n).plot(ax=ax, legend=True)\nax = (\n    lp := chipop[chipop['community'] == 'LINCOLN PARK'].overlay(\n        shape,\n        how='intersection'\n    )\n).plot(ax=ax, legend=True)\nax = chipop.boundary.plot(ax=ax, color='#666666', linewidth=0.8)\nax = lp.boundary.plot(color='red', ax=ax)\nax = hp.boundary.plot(color='red', ax=ax)\nax.set_axis_off()\n_ = ax.set_title('Intersection of Humboldt Park & ClimRR data')\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10, 7))\nchiwind = data['WindSpeed'].overlay(\n    chipop,\n    how='intersection'\n).overlay(chipop, how='union')\nax = chiwind.boundary.plot(ax=ax, color='#666666', linewidth=0.8)\nax.set_axis_off()\n\n\n\n\n\n_, ax = plt.subplots(figsize=(10, 7))\nax = chipop.boundary.plot(color='#666666', linewidth=0.8, ax=ax, alpha=0.2)\nax = chiwind.plot(column='hist', ax=ax, legend=True)\nax.set_axis_off()\nax.set_title('Historical Wind Data across Chicago Neighborhoods')\nplt.tight_layout()\n\n\n\n\n\nchiwind.explore(column='hist')\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n_, ax = plt.subplots()\nax = chiwind.plot(column='hist', scheme='quantiles', k=8, ax=ax)\n_ = ax.set_title('WindSpeed, historical')\nax.set_axis_off()\nplt.tight_layout()\n\n\n\n\n\nfig, ax = plt.subplots()\nax = chiwind.plot(column='rcp45_midc', scheme='quantiles', k=3, ax=ax)\nax.set_axis_off()\n_ = ax.set_title('WindSpeed, Mid-Century [RCP45]')\nplt.tight_layout()\n\n\n\n\n\nfig, ax = plt.subplots()\nax = chiwind.plot(column='rcp45_endc', scheme='quantiles', k=3, ax=ax)\n_ = ax.set_title('WindSpeed, End-Century [RCP45]')\nplt.tight_layout()\n\n\n\n\n\nfig, ax = plt.subplots(ncols=3, figsize=(16, 7))\nax0 = chiwind.plot('hist', ax=ax[0])\nax1 = chiwind.plot('rcp45_midc', ax=ax[1])\nax2 = chiwind.plot('rcp45_midc', ax=ax[2])\nax0.set_axis_off()\nax1.set_axis_off()\nax2.set_axis_off()\n\n\n\n\n\ndata['WindSpeed'].shape\n\n(62834, 18)\n\n\n\nselection = shape[0:5]\n\nfor index, row in selection.iterrows():\n    # get the area of the polygon\n    poly_area = row['geometry'].area\n    console.print(f\"Polygon area at {index} is {poly_area:.3f}\")\n\nPolygon area at 0 is 252927293.657\n\n\n\nPolygon area at 1 is 235501313.715\n\n\n\nPolygon area at 2 is 233416379.950\n\n\n\nPolygon area at 3 is 261761834.191\n\n\n\nPolygon area at 4 is 226073092.218\n\n\n\n\n\n\nCitationBibTeX citation:@misc{foreman2023,\n  author = {Foreman, Sam},\n  date = {2023-07-14},\n  url = {https://saforem2.github.io/climate-analysis},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nForeman, Sam. 2023. Intro to HPC: Climate Analysis with ClimRR.\nhttps://saforem2.github.io/climate-analysis."
  },
  {
    "objectID": "qmd/GettingStarted/example.html",
    "href": "qmd/GettingStarted/example.html",
    "title": "Example: Groceries in Chicago",
    "section": "",
    "text": "We will walk through an example that demonstrates how to clip geometries to the boundary of a polygon geometry using GeoPandas.\nThis example shows how to clip a set of vector geometries to the spatial extent / shape of another object.\nBoth sets of geometries must be opened with GeoPandas as GeoDataFrames and be in the same Coordinate Reference System (CRS) for the clip function from GeoPandas to work.\nThis example uses data from geodatasets, namely:\nalongside a custom rectangle geometry made with shapely and then turned into a GeoDataFrame."
  },
  {
    "objectID": "qmd/GettingStarted/example.html#imports",
    "href": "qmd/GettingStarted/example.html#imports",
    "title": "Example: Groceries in Chicago",
    "section": "Imports",
    "text": "Imports\n\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nfrom shapely.geometry import box\nimport geodatasets\n\n\n%load_ext autoreload\n%autoreload 2\n%matplotlib inline\nimport matplotlib_inline\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport warnings\n\nimport matplotlib.pyplot as plt\n\nmatplotlib_inline.backend_inline.set_matplotlib_formats('svg')\n\nfrom ClimRR import set_plot_style, COLORS\nset_plot_style()\nfrom rich.console import Console as Console\nfrom enrich.style import STYLES\nfrom rich.theme import Theme\n\nconsole = Console(theme=Theme(STYLES), log_path=False, markup=True)\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\nUsing updated plot style for matplotlib"
  },
  {
    "objectID": "qmd/GettingStarted/example.html#get-or-create-example-data",
    "href": "qmd/GettingStarted/example.html#get-or-create-example-data",
    "title": "Example: Groceries in Chicago",
    "section": "Get or Create Example Data",
    "text": "Get or Create Example Data\nBelow, the example GeoPandas data is imported and opened as a GeoDataFrame.\nAdditionally, a polygon is created with shapely and then converted into a GeoDataFrame with the same CRS as the GeoPandas dataset\n\nimport geodatasets\nchicago = gpd.read_file(geodatasets.get_path(\"geoda.chicago_commpop\"))\ngroceries = gpd.read_file(geodatasets.get_path(\"geoda.groceries\")).to_crs(chicago.crs)\n\nCreate a subset of the chicago data that is just the near west side\n\nnear_west_side = chicago[chicago[\"community\"] == \"NEAR WEST SIDE\"]\nlincoln_park = chicago[chicago[\"community\"] == \"LINCOLN PARK\"]\nlogan_square = chicago[chicago[\"community\"] == \"LOGAN SQUARE\"]\n\nCreate a custom polygon\n\npolygon = box(-87.8, 41.9, -87.5, 42)\npoly_gdf = gpd.GeoDataFrame([1], geometry=[polygon], crs=chicago.crs)"
  },
  {
    "objectID": "qmd/GettingStarted/example.html#plot-the-unclipped-data",
    "href": "qmd/GettingStarted/example.html#plot-the-unclipped-data",
    "title": "Example: Groceries in Chicago",
    "section": "Plot the Unclipped Data",
    "text": "Plot the Unclipped Data\n\nfig, (ax1, ax2) = plt.subplots(figsize=(14, 6), ncols=2, sharey='col')\npoly_gdf.boundary.plot(ax=ax1, color=COLORS['red'])\nchicago.boundary.plot(ax=ax1, color=COLORS['grey060'], linewidth=0.6, zorder=-1)\n# near_west_side.boundary.plot(ax=ax2, color=COLORS['red'])\n# near_west_side.plot(ax=ax2, color=COLORS['green'], alpha=0.3)\n# west_town.plot(ax=ax2, color=COLORS['green'], alpha=0.3)\nchicago.plot(ax=ax1, alpha=0.4)\npoly_gdf.boundary.plot(ax=ax2, color=COLORS['red'])\nchicago.boundary.plot(ax=ax2, color=COLORS['grey060'], linewidth=0.6, zorder=-1)\ngroceries.plot(ax=ax2, color=COLORS['blue'], zorder=1, marker='.', alpha=0.66)\nax1.set_title(\"All Unclipped Chicago Communities\", fontsize=20)\nax2.set_title(\"All Unclipped Groceries\", fontsize=20)\nax1.set_axis_off()\nax2.set_axis_off()\nplt.tight_layout()"
  },
  {
    "objectID": "qmd/GettingStarted/example.html#clip-the-data",
    "href": "qmd/GettingStarted/example.html#clip-the-data",
    "title": "Example: Groceries in Chicago",
    "section": "Clip the Data",
    "text": "Clip the Data\nThe object on which you call clip is the object that will be clipped.\nThe object you pass is the clip extent.\nThe returned output will be a new clipped GeoDataFrame. All of the attributes for each returned geometry will be retained when you clip.\n\n\n\n\n\n\nCoordinate Reference System\n\n\n\n\n\nRecall that the data must be in the same CRS in order to use the clip method.\nIf the data is not in the same CRS, be sure to use the GeoDataFrame.to_crs method to ensure both datasets are in the same CRS."
  },
  {
    "objectID": "qmd/GettingStarted/example.html#clip-the-chicago-data",
    "href": "qmd/GettingStarted/example.html#clip-the-chicago-data",
    "title": "Example: Groceries in Chicago",
    "section": "Clip the Chicago Data",
    "text": "Clip the Chicago Data\n\nchicago_clipped = chicago.clip(polygon)\ngroceries_clipped = groceries.clip(polygon)\n# plot the clipped data\nfig, ax = plt.subplots(figsize=(14, 6), ncols=2)\nax0 = chicago_clipped.plot(ax=ax[0], color='C0', alpha=0.66)\nax0 = chicago.boundary.plot(ax=ax[0], color=COLORS['grey060'], zorder=-1, linewidth=0.6)\nax0 = poly_gdf.boundary.plot(ax=ax[0], color=COLORS['red'])\n\nax1 = groceries_clipped.plot(ax=ax[1], color='C1', alpha=0.66, zorder=10, marker='.')\n# chicago.boundary.plot(ax=ax[1], color='#444444')\nax1 = chicago.boundary.plot(ax=ax[1], color=COLORS['grey060'], zorder=-1, linewidth=0.6)\nax1 = poly_gdf.boundary.plot(ax=ax[1], color=COLORS['red'])\n\nax0.set_title(\"Chicago Clipped\", fontsize=20)\nax0.set_axis_off()\nax1.set_title(\"Groceries Clipped\", fontsize=20)\nax1.set_axis_off()\nplt.tight_layout()"
  },
  {
    "objectID": "qmd/ClimRR/ClimRR.html",
    "href": "qmd/ClimRR/ClimRR.html",
    "title": "Climate Risk & Resilience Portal",
    "section": "",
    "text": "For completeness, we include text below from (Burdi and Branham 2023)\nClimate scenarios are the set of conditions used to represent estimates of future greenhouse gas (GHG) concentrations in the atmosphere. Climate models then evaluate how these GHG concentrations affect future (projected) climate.\nThe data in ClimRR include model results from two future climate scenarios, called Representative Concentration Pathways (RCPs):\n\nRCP4.5: in this scenario, human GHG emissions peak around 2040, then decline\nRCP8.5: in this scenario, human GHG emissions continue to rise throughout the 21-st century\n\nEach RCP is modeled over a mid-century period (2045—2054) and end-of-century-period (2081 to 2094). A historical period (1995—2004) is also modeled using GHG concentrations during this period."
  },
  {
    "objectID": "qmd/ClimRR/ClimRR.html#climate-scenarios",
    "href": "qmd/ClimRR/ClimRR.html#climate-scenarios",
    "title": "Climate Risk & Resilience Portal",
    "section": "",
    "text": "For completeness, we include text below from (Burdi and Branham 2023)\nClimate scenarios are the set of conditions used to represent estimates of future greenhouse gas (GHG) concentrations in the atmosphere. Climate models then evaluate how these GHG concentrations affect future (projected) climate.\nThe data in ClimRR include model results from two future climate scenarios, called Representative Concentration Pathways (RCPs):\n\nRCP4.5: in this scenario, human GHG emissions peak around 2040, then decline\nRCP8.5: in this scenario, human GHG emissions continue to rise throughout the 21-st century\n\nEach RCP is modeled over a mid-century period (2045—2054) and end-of-century-period (2081 to 2094). A historical period (1995—2004) is also modeled using GHG concentrations during this period."
  },
  {
    "objectID": "qmd/ClimRR/ClimRR.html#downscaled-climate-models",
    "href": "qmd/ClimRR/ClimRR.html#downscaled-climate-models",
    "title": "Climate Risk & Resilience Portal",
    "section": "Downscaled Climate Models",
    "text": "Downscaled Climate Models\nA global climate model (GCM) is a complex mathematical representation of the major climate system components (atmosphere, land surface, ocean, and sea ice) and their interactions.\nThese models project climatic conditions at frequent intervals over long periods of time (e.g., every 3 hours for the next 50—100 years), often with the purpose of evaluating how one or more GHG scenarios will impact future climate.\nMost GCMs project patterns at relatively coarse spatial resolutions, using grid cells ranging from 100km to 200km.\nThe climate data presented in this portal has been downscaled to a higher spatial resolution (12km) to fill a growing need for risk analysis and resilience planning at the local level.\nWe use dynamical downscaling, which applies the outputs of a GCM as inputs to a separate, high-resolution regional climate model.\nDynamical downscaling accounts for the physical processes and natural features of a region, as well as the complex interaction between these elements and global dynamics under a climate scenario.\nArgonne’s dynamical downscaling uses the Weather Research and Forecasting (WRF) model, which is a regional weather model for North America developed by the National Center for Atmospheric Research.\nScientists at Argonne dynamically downscaled three different GCMs, including:\n\nCCSM: The Community Climate System Model (Version 4) is a coupled global climate model developed by the University Corporation for Atmospheric Research with funding from the National Science Foundation, the Department of Energy, and the National Aeronautics and Space Administration. It is comprised of atmospheric, land surface, and sea ice sub-models that run simultaneously with a central coupler component.\nGFDL: The Geophysical Fluid Dynamics Laboratory at the National Oceanic and Atmospheric Administration developed the Earth System Model Version 2G (note: the general convention, which we use, is to use the Laboratory’s abbreviation to identify this model). It includes an atmospheric circulation model and an oceanic circulation model, and takes into account land, sea ice, and iceberg dynamics.\nHadGEM: The United Kingdom’s Met Office developed the Hadley Global Environment Model 2—Earth System. It is used for both operational weather forecasting and climate research, and includes coupled atmosphere‐ocean analysis and an earth system component that includes dynamic vegetation, ocean biology, and atmospheric chemistry."
  },
  {
    "objectID": "qmd/ClimRR/ClimRR.html#ensemble-means",
    "href": "qmd/ClimRR/ClimRR.html#ensemble-means",
    "title": "Climate Risk & Resilience Portal",
    "section": "Ensemble Means",
    "text": "Ensemble Means\nAll data layers in ClimRR represent a climate variable along with its associated time period and climate scenario (e.g. mid-century RCP4.5). Each time period comprises one decade’s worth of information:\n\nhistorical: (1995 — 2004)\nmid-century: (2045 — 2054)\nend-of-century: (2085 — 2094)\n\nFor each scenario, the WRF model is run with each of the three GCM outputs, producing three individual decades of weather data for each scenario.\nIn other words, 30 years of downscaled climate data is produced for each decadal scenario.\nBy using the outputs from three different GCMs, rather than a single model, Argonne’s climate projections better account for the internal uncertainty associated with any single model.\nEach year’s worth of data includes weather outputs for every 3 hours, or 8 modeled outputs per day.\nWhile this allows for a high degree of granularity in assessing future climate models, there are many different ways to analyze this data; however, there are several important common methodologies share across all variables presented in this portal.\nMost variables are presented as annual or seasonal averages of daily observations, yet each annual / seasonal average draws upon all three different climate model runs for that scenario and the ten years of data produced by each model.\n\n\n\n\n\n\nEnsemble Mean\n\n\n\n\n\nEach variable (e.g. total_annual_precipitation) for a given scenario (e.g. Mid-century RCP4.5) is produced by calculating an individual estimate for each of the 30 years of climate data associated with that scenario, and then taking the average of 30 estimates.\nThis result is what we term the ensemble mean."
  },
  {
    "objectID": "qmd/ClimRR/ClimRR.html#metadata",
    "href": "qmd/ClimRR/ClimRR.html#metadata",
    "title": "Climate Risk & Resilience Portal",
    "section": "Metadata",
    "text": "Metadata\nThe links below direct to the REST service of the gridded data. Metadata, descriptions, and field names were last updated on 11/7/2022.\n\nTemperature Minimum – Annual\nTemperature Minimum – Seasonal\nTemperature Maximum – Annual\nTemperature Maximum – Seasonal\nPrecipitation – Annual Total\nPrecipitation None – Annual Average\nWind Speed – Annual Average\nCooling Degree Days – Annual Total\nHeating Degree Days – Annual Total\n\nThe definitions for each of these terms can be found here."
  },
  {
    "objectID": "qmd/ClimRR/ClimRR.html#temperature-annual",
    "href": "qmd/ClimRR/ClimRR.html#temperature-annual",
    "title": "Climate Risk & Resilience Portal",
    "section": "Temperature (Annual)",
    "text": "Temperature (Annual)\nEach climate model generates temperature readings every 3 hours, or 8 temperature readings per day.\nThe maximum daily temperature refers to the highest of these 8 readings, which often occurs in the middle of the daytime and is comparable to the ‘high temperature’ in a daily weather forecast.\nSimilarly, the minimum daily temperature refers to the lowest of these 8 readings, which often occurs overnight and is comparable to the ‘low temperature’ in a daily weather forecast.\nArgonne calculated the annual average of both the maximum and minimum daily temperatures.\nThese daily high / low readings were then used to calculate the annual average maximum or minimum daily temperature for that scenario’s model year (e.g. the average max daily temperature for 2045 using the CCSM model under RCP4.5).\nThis process was repeated for each year within a given time period / scenario (e.g. 2046, 2047, and so forth) across all three climate models (CCSM, GFDL, and HadGEM).\nFinally, the 30 individual annual averages for a given time period/scenario were themselves averaged, producing a multi-model ensemble mean that represents the annual average of the maximum or minimum daily temperature for a given time period / scenario."
  },
  {
    "objectID": "qmd/GettingStarted/setup.html#download-the-data",
    "href": "qmd/GettingStarted/setup.html#download-the-data",
    "title": "Getting Started",
    "section": "Download the Data",
    "text": "Download the Data\nThe data is available as a *.zip file with everything you will need to get started.\n\n\n\n\n\n\nDownload Data\n\n\n\n\n\n\nClimRR Data Download (ANL)\n\n\n\n\n\nClone the Github repo\ngit clone https://github.com/saforem2/climate-analysis\ncd ./climate-analysis/\nCreate a virtual environment (venv)1 and install ClimRR into it2:\n# ------------------------------------------------------------\n# 1. Make a directory where the venv will live\nmkdir -p ./venvs/ClimRR\n# 2. Create a virtual environment with `python3 -m venv`\npython3 -m venv ./venvs/ClimRR --system-site-packages\n# 3. Install the python package as an editable install (`-e`)\n# ------------------------------------------------------------\npython3 -m pip install -e \".[dev]\"\n# 4. Verify the package was installed correctly\npython3 -c 'import ClimRR ; print(ClimRR.__file__)'\n# should print something like:\n# /Users/samforeman/projects/saforem2/climate-analysis/src/ClimRR/__init__.py"
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Climate Analysis with ClimRR",
    "section": "",
    "text": "Figure 1: Image Source\n\n\n\nEmpowering individuals, governments, and organizations to examine simulated future climate conditions at mid- and end-of-century for a range of climate perils.\n\nThe ClimRR Portal can be viewed online, and is a great resource for interactive exploration.\nClimate change is increasing the complexity, intensity, and frequency of disasters.\nUnderstanding future climate conditions in cities and towns across the United States is necessary to prepare for future climate realities.\nTo address this requirement, ClimRR1 — the Climate Risk and Resilience Portal — empowers individuals, governments, and organizations to examine simulated future climate conditions at mid- and end-of-century for a range of climate perils.\n\n\n\n\n\n\n\nDownload Data\n\n\n\n\n\n\nClimRR Data Download (ANL)\nCounties - United States of America\n\n\n\n\n\n\nProject Description\n\nAre different populations unequally affected by climate change? This project will explore the intersection of climate data and energy justice, providing an introductory understanding of data science techniques in assessing disparate outcomes on vulnerable or underserved populations in the United States. By shedding light on energy disparities, the project aims to contribute to the ongoing discussions surrounding energy equity and inform policymakers and stakeholders for more inclusive energy initiatives. Energy justice refers to the equitable distribution of clean, affordable, and reliable energy resources among all communities, regardless of their socioeconomic status or demographic characteristics.\nThis project will focus on the analysis of climate data and low-income energy affordability data across the United States. The analysis will focus on examining energy consumption patterns, renewable energy adoption rates, and energy affordability across different geographical regions and demographic groups.\nTo assess disparate outcomes, the project will employ various statistical techniques to compare energy-related indicators among vulnerable populations.\nThis work may involve analyzing energy access in low-income neighborhoods, evaluating the impact of energy policies on marginalized communities, or examining the correlation between energy affordability and socioeconomic factors.\nThe findings of the analysis will be interpreted to gain insights into the disparities in energy justice and its impact on vulnerable populations. The project aims to identify areas where energy inequalities exist and provide a data-driven foundation for advocating for equitable energy policies and programs."
  },
  {
    "objectID": "index.html#climate-risk-resilience-portal-climrr",
    "href": "index.html#climate-risk-resilience-portal-climrr",
    "title": "Intro to HPC: ClimRR",
    "section": "Climate Risk & Resilience Portal (ClimRR)",
    "text": "Climate Risk & Resilience Portal (ClimRR)\nThe ClimRR Portal can be viewed online, and is a great resource for interactive exploration.\nClimate change is increasing the complexity, intensity, and frequency of disasters.\nUnderstanding future climate conditions in cities and towns across the United States is necessary to prepare for future climate realities.\nTo address this requirement, ClimRR2 — the Climate Risk and Resilience Portal — empowers individuals, governments, and organizations to examine simulated future climate conditions at mid- and end-of-century for a range of climate perils.\n\n\n\n\n\n\n\nDownload Data\n\n\n\n\n\n\nClimRR Data Download (ANL)\nCounties - United States of America\n\n\n\n\n\n\nProject Description\n\nAre different populations unequally affected by climate change? This project will explore the intersection of climate data and energy justice, providing an introductory understanding of data science techniques in assessing disparate outcomes on vulnerable or underserved populations in the United States. By shedding light on energy disparities, the project aims to contribute to the ongoing discussions surrounding energy equity and inform policymakers and stakeholders for more inclusive energy initiatives. Energy justice refers to the equitable distribution of clean, affordable, and reliable energy resources among all communities, regardless of their socioeconomic status or demographic characteristics.\nThis project will focus on the analysis of climate data and low-income energy affordability data across the United States. The analysis will focus on examining energy consumption patterns, renewable energy adoption rates, and energy affordability across different geographical regions and demographic groups.\nTo assess disparate outcomes, the project will employ various statistical techniques to compare energy-related indicators among vulnerable populations.\nThis work may involve analyzing energy access in low-income neighborhoods, evaluating the impact of energy policies on marginalized communities, or examining the correlation between energy affordability and socioeconomic factors.\nThe findings of the analysis will be interpreted to gain insights into the disparities in energy justice and its impact on vulnerable populations. The project aims to identify areas where energy inequalities exist and provide a data-driven foundation for advocating for equitable energy policies and programs."
  },
  {
    "objectID": "qmd/GettingStarted/example.html#clip-the-groceries-data",
    "href": "qmd/GettingStarted/example.html#clip-the-groceries-data",
    "title": "Example: Groceries in Chicago",
    "section": "Clip the Groceries Data",
    "text": "Clip the Groceries Data\nNext we’ll look at the distribution of grocery stores in two different communities.\n\nfig, (ax1, ax2) = plt.subplots(figsize=(14, 6), ncols=2, sharey='col')\nchicago.boundary.plot(ax=ax1, color=COLORS['grey060'], linewidth=0.6, zorder=-1)\nnear_west_side.boundary.plot(ax=ax2, color=COLORS['red'])\nnear_west_side.plot(ax=ax2, color=COLORS['green'], alpha=0.3)\n\nlogan_square.boundary.plot(ax=ax2, color=COLORS['red'])\nlogan_square.plot(ax=ax2, color=COLORS['green'], alpha=0.3)\n# west_town.plot(ax=ax2, color=COLORS['green'], alpha=0.3)\nchicago.plot(ax=ax1, alpha=0.4)\nchicago.boundary.plot(ax=ax2, color=COLORS['grey060'], linewidth=0.6, zorder=-1)\ngroceries.plot(ax=ax2, color=COLORS['blue'], zorder=1, marker='.', alpha=0.66)\nax1.set_title(\"All Unclipped Chicago Communities\", fontsize=20)\nax2.set_title(\"All Unclipped Groceries\", fontsize=20)\nax1.set_axis_off()\nax2.set_axis_off()\nplt.tight_layout()"
  },
  {
    "objectID": "qmd/GettingStarted/intro.html#visualizing-our-data",
    "href": "qmd/GettingStarted/intro.html#visualizing-our-data",
    "title": "Climate Analysis with ClimRR",
    "section": "Visualizing our Data",
    "text": "Visualizing our Data\nLets inspect the first few entries from our Shapefile:\n\n\n\n\nCode\nfig, ax = plt.subplots(\n    figsize=(12, 3.5),\n    nrows=1,\n    ncols=3,\n    sharey='row'\n)\nax = ax.flatten()\npairs = {\n    '1k': list(range(1000)),\n    '5k': list(range(5000)),\n    '20k': list(range(20000)),\n}\nfor idx, (key, val) in enumerate(pairs.items()):\n    ax[idx] = shape.loc[val, :].plot(ax=ax[idx])\n    ax[idx].set_axis_off()\n    _ = ax[idx].set_title(f\"First {key} cells\")\nplt.tight_layout()\n\n\n\n\n\nFigure 1: As we include more cells, we see the outline of the US beginning to take shape."
  },
  {
    "objectID": "qmd/GettingStarted/example.html#groceries-in-near-west-side",
    "href": "qmd/GettingStarted/example.html#groceries-in-near-west-side",
    "title": "Example: Groceries in Chicago",
    "section": "Groceries in Near West Side",
    "text": "Groceries in Near West Side\n\ngroceries_west_side = groceries.clip(near_west_side)\nfig, ax = plt.subplots(figsize=(14,6))\ngroceries_west_side.plot(ax=ax, color='C2', marker='.', alpha=0.6)\nchicago.boundary.plot(ax=ax, color=COLORS['grey060'], linewidth=0.6, zorder=-1)\nnear_west_side.boundary.plot(ax=ax, color='#444444')\nnear_west_side.boundary.plot(ax=ax, color=COLORS['red'])\nnear_west_side.plot(ax=ax, color=COLORS['green'], alpha=0.3)\nax.set_title(\"Groceries in the Near West Side\")\nax.set_axis_off()"
  },
  {
    "objectID": "qmd/GettingStarted/example.html#groceries-in-logan-square",
    "href": "qmd/GettingStarted/example.html#groceries-in-logan-square",
    "title": "Example: Groceries in Chicago",
    "section": "Groceries in Logan Square",
    "text": "Groceries in Logan Square\n\ngroceries_logan_square = groceries.clip(logan_square)\nfig, ax = plt.subplots(figsize=(14,6))\ngroceries_logan_square.plot(ax=ax, color='C2', marker='.', alpha=0.6)\nchicago.boundary.plot(ax=ax, color=COLORS['grey060'], linewidth=0.6, zorder=-1)\nlogan_square.boundary.plot(ax=ax, color='#444444')\nlogan_square.boundary.plot(ax=ax, color=COLORS['red'])\nlogan_square.plot(ax=ax, color=COLORS['green'], alpha=0.3)\nax.set_title(\"Groceries in Logan Square\")\nax.set_axis_off()"
  },
  {
    "objectID": "qmd/GettingStarted/example.html#groceries-in-lincoln-park",
    "href": "qmd/GettingStarted/example.html#groceries-in-lincoln-park",
    "title": "Example: Groceries in Chicago",
    "section": "Groceries in Lincoln Park",
    "text": "Groceries in Lincoln Park\n\ngroceries_lp = groceries.clip(lincoln_park)\nfig, ax = plt.subplots(figsize=(14,6))\ngroceries_lp.plot(ax=ax, color='C2')\nchicago.boundary.plot(ax=ax, color=COLORS['grey060'], linewidth=0.6, zorder=-1)\nlincoln_park.boundary.plot(ax=ax, color='#444444')\nlincoln_park.boundary.plot(ax=ax, color=COLORS['red'])\nlincoln_park.plot(ax=ax, color=COLORS['green'], alpha=0.3)\nax.set_title(\"Groceries in Lincoln Park\")\nax.set_axis_off()"
  },
  {
    "objectID": "qmd/GettingStarted/example.html#additional-questions",
    "href": "qmd/GettingStarted/example.html#additional-questions",
    "title": "Example: Groceries in Chicago",
    "section": "Additional Questions",
    "text": "Additional Questions\n\nCan you identify which neighborhoods have the most grocery stores? How many?\n\nWhich have the least? How many?"
  },
  {
    "objectID": "qmd/GettingStarted/example.html#reference",
    "href": "qmd/GettingStarted/example.html#reference",
    "title": "Example: Groceries in Chicago",
    "section": "Reference",
    "text": "Reference\nGeoPandas: Clip Vector Data"
  },
  {
    "objectID": "qmd/ClimRR/ClimRR.html#temperature-seasonal",
    "href": "qmd/ClimRR/ClimRR.html#temperature-seasonal",
    "title": "Climate Risk & Resilience Portal",
    "section": "Temperature (Seasonal)",
    "text": "Temperature (Seasonal)\nEach climate model generates temperature readings every 3 hours, or 8 temperature readings per day.\nThe maximum daily temperature refers to the highest of these 8 readings, which often occurs in the middle of the daytime and is comparable to the ‘high temperature’ in a daily weather forecast.\nSimilarly, the minimum daily temperature refers to the lowest of these 8 readings, which often occurs overnight and is comparable to the ‘low temperature’ in a daily weather forecast.\nArgonne calculated the seasonal average of both the maximum and minimum daily temperatures; the seasons are segmented as\n\nWinter (Dec, Jan, Feb)\nSpring (March, April, May)\nSummer (June, July, Aug)\nAutumn (Sep, Oct, Nov)\n\nThese calculations involved extracting the highest temperature reading and lowest temperature reading for each individual day of a year (e.g. 2045) within a given time period / scenario (e.g. mid-century RCP4.5) and for a given climate model (e.g. CCSM).\nThese daily high / low readings were then classified by season and used to calculate the seasonal average maximum or minimum daily temperature for that scenario’s model year (e.g. the average daily max temperature for summer of 2045 using the CCSM model under RCP4.5).\nThis process was repeated for each year within a given time period / scenario (e.g. 2046, 2047, and so forth) across all three climate models (CCSM, GFDL, and HadGEM).\nFinally, the 30 individual seasonal averages for a given time period / scenario were themselves averaged, producing a multi-modal ensemble mean that represents the seasonal average of the maximum or minimum daily temperature for a given time period / scenario."
  },
  {
    "objectID": "qmd/ClimRR/ClimRR.html#precipitation",
    "href": "qmd/ClimRR/ClimRR.html#precipitation",
    "title": "Climate Risk & Resilience Portal",
    "section": "Precipitation",
    "text": "Precipitation\nEach climate model estimates an amount of precipitation (whether rain, snow, sleet, or ice) that occurs every 3 hours across the entire modeled time period (i.e. every 3 hours, of every day, for all modeled years).\nThese 3-hour precipitation estimates can be used to calculate the total precipitation over a designated period of time, ranging from daily to annually.\nArgonne calculated total annual precipitation by adding all 3-hour precipitation estimates for a given year (e.g. 2045) within a given time period / scenario (e.g. mid-century RCP4.5) and for a given climate model (e.g. CCSM), which produced the total annual precipitation for that scenario’s model year, such as CCSM’s estimate of annual precipitation in 2045 under climate scenario RCP4.5.\nThis process was repeated for each year within a given time period / scenario (e.g. 2046, 2047, and so forth) and across all three climate models (CCSM, GFDL, and HadGEM), producing a total of 30 estimates of total annual precipitation for a given time period / scenario.\nThe average of these values was taken to produce the ensemble mean of the total annual precipitation (in inches) for each time period / scenario."
  },
  {
    "objectID": "qmd/ClimRR/ClimRR.html#wind-speed",
    "href": "qmd/ClimRR/ClimRR.html#wind-speed",
    "title": "Climate Risk & Resilience Portal",
    "section": "Wind Speed",
    "text": "Wind Speed\nEach climate model generates estimated wind speed readings (in miles per hour, or mph) every 3 hours, or 8 wind speed readings per day.\nThese values are irrespective of wind direction and only represent the magnitude of wind speed.\nUsing these readings, Argonne calculated the average daily wind speed (the average of each day’s 8 wind speed readings) for every day within a given time period / scenario (e.g. mid-century RCP4.5) and for each climate model (CCSM, GFDL, and HadGEM).\nArgonne then took the average of each daily average wind speed for a given year (e.g. 2045) and within a given time period / scenario (e.g. mid-century RCP4.5) and for a given climate model (e.g. CCSM), which produced the annual average wind speed for that scenario’s model year, such as CCSM’s estimate of annual average wind speeds in 2045 under climate scenario RCP4.5.\nThis process was repeated for each year within a given time period / scenario.\nThe average of these values was taken to produce the ensemble mean of the annual average wind speed (in mph) for each time period / scenario."
  },
  {
    "objectID": "qmd/ClimRR/ClimRR.html#consecutive-days-with-no-precipitation",
    "href": "qmd/ClimRR/ClimRR.html#consecutive-days-with-no-precipitation",
    "title": "Climate Risk & Resilience Portal",
    "section": "Consecutive Days With No Precipitation",
    "text": "Consecutive Days With No Precipitation\nEach climate model estimates an amount of precipitation (whether rain, snow, sleet, or ice) that occurs every 3 hours across the entire modeled time period (i.e. every 3 hours, of every day, for all modeled years).\nThese 3-hour precipitation estimates were used to calculate the daily precipitation quantities by adding all 8 precipitation readings for each day of a given year (e.g. 2045) within a given time period / scenario (e.g. mid-century RCP4.5) and for a given climate model (e.g. CCSM).\nThis process produced the total daily precipitation for every day in a scenario’s model year, such as CCSM’s daily estimates of total precipitation for the year 2045 under climate scenario RCP4.5.\nUsing this information, Argonne identified the greatest number of consecutive days in which no precipitation occurred (i.e. the total daily precipitation quantity equaled zero) for that scenario’s model year (e.g. for the year 2045 under scenario RCP4.5, the highest number of consecutive days without any precipitation was X).\nThis process was repeated for each year within a given time period / scenario (e.g. 2046, 2047 and so forth) across all three climate models (CCSM, GFDL, and HadGEM) producing 10 yearly values for each model, with each value representing the longest consecutive span with no precipitation for that year.\nOf the 10 yearly values for each climate model, the maximum value was selected (e.g. the decadal maximum). This resulted in 3 values for each climate model’s 10 years of data.\nThe average of these maximum of the maxima was then taken to produce the ensemble mean of the decade’s highest number of consecutive days without precipitation in a single year."
  },
  {
    "objectID": "qmd/ClimRR/definitions.html",
    "href": "qmd/ClimRR/definitions.html",
    "title": "Climate Variables",
    "section": "",
    "text": "Each climate model generates temperature readings every 3 hours, or 8 temperature readings per day.\nThe maximum daily temperature refers to the highest of these 8 readings, which often occurs in the middle of the daytime and is comparable to the ‘high temperature’ in a daily weather forecast.\nSimilarly, the minimum daily temperature refers to the lowest of these 8 readings, which often occurs overnight and is comparable to the ‘low temperature’ in a daily weather forecast.\nArgonne calculated the annual average of both the maximum and minimum daily temperatures.\nThese daily high / low readings were then used to calculate the annual average maximum or minimum daily temperature for that scenario’s model year (e.g. the average max daily temperature for 2045 using the CCSM model under RCP4.5).\nThis process was repeated for each year within a given time period / scenario (e.g. 2046, 2047, and so forth) across all three climate models (CCSM, GFDL, and HadGEM).\nFinally, the 30 individual annual averages for a given time period/scenario were themselves averaged, producing a multi-model ensemble mean that represents the annual average of the maximum or minimum daily temperature for a given time period / scenario."
  },
  {
    "objectID": "qmd/ClimRR/definitions.html#temperature-seasonal",
    "href": "qmd/ClimRR/definitions.html#temperature-seasonal",
    "title": "Climate Variables",
    "section": "Temperature (Seasonal)",
    "text": "Temperature (Seasonal)\nEach climate model generates temperature readings every 3 hours, or 8 temperature readings per day.\nThe maximum daily temperature refers to the highest of these 8 readings, which often occurs in the middle of the daytime and is comparable to the ‘high temperature’ in a daily weather forecast.\nSimilarly, the minimum daily temperature refers to the lowest of these 8 readings, which often occurs overnight and is comparable to the ‘low temperature’ in a daily weather forecast.\nArgonne calculated the seasonal average of both the maximum and minimum daily temperatures; the seasons are segmented as\n\nWinter (Dec, Jan, Feb)\nSpring (March, April, May)\nSummer (June, July, Aug)\nAutumn (Sep, Oct, Nov)\n\nThese calculations involved extracting the highest temperature reading and lowest temperature reading for each individual day of a year (e.g. 2045) within a given time period / scenario (e.g. mid-century RCP4.5) and for a given climate model (e.g. CCSM).\nThese daily high / low readings were then classified by season and used to calculate the seasonal average maximum or minimum daily temperature for that scenario’s model year (e.g. the average daily max temperature for summer of 2045 using the CCSM model under RCP4.5).\nThis process was repeated for each year within a given time period / scenario (e.g. 2046, 2047, and so forth) across all three climate models (CCSM, GFDL, and HadGEM).\nFinally, the 30 individual seasonal averages for a given time period / scenario were themselves averaged, producing a multi-modal ensemble mean that represents the seasonal average of the maximum or minimum daily temperature for a given time period / scenario."
  },
  {
    "objectID": "qmd/ClimRR/definitions.html#precipitation",
    "href": "qmd/ClimRR/definitions.html#precipitation",
    "title": "Climate Variables",
    "section": "Precipitation",
    "text": "Precipitation\nEach climate model estimates an amount of precipitation (whether rain, snow, sleet, or ice) that occurs every 3 hours across the entire modeled time period (i.e. every 3 hours, of every day, for all modeled years).\nThese 3-hour precipitation estimates can be used to calculate the total precipitation over a designated period of time, ranging from daily to annually.\nArgonne calculated total annual precipitation by adding all 3-hour precipitation estimates for a given year (e.g. 2045) within a given time period / scenario (e.g. mid-century RCP4.5) and for a given climate model (e.g. CCSM), which produced the total annual precipitation for that scenario’s model year, such as CCSM’s estimate of annual precipitation in 2045 under climate scenario RCP4.5.\nThis process was repeated for each year within a given time period / scenario (e.g. 2046, 2047, and so forth) and across all three climate models (CCSM, GFDL, and HadGEM), producing a total of 30 estimates of total annual precipitation for a given time period / scenario.\nThe average of these values was taken to produce the ensemble mean of the total annual precipitation (in inches) for each time period / scenario."
  },
  {
    "objectID": "qmd/ClimRR/definitions.html#wind-speed",
    "href": "qmd/ClimRR/definitions.html#wind-speed",
    "title": "Climate Variables",
    "section": "Wind Speed",
    "text": "Wind Speed\nEach climate model generates estimated wind speed readings (in miles per hour, or mph) every 3 hours, or 8 wind speed readings per day.\nThese values are irrespective of wind direction and only represent the magnitude of wind speed.\nUsing these readings, Argonne calculated the average daily wind speed (the average of each day’s 8 wind speed readings) for every day within a given time period / scenario (e.g. mid-century RCP4.5) and for each climate model (CCSM, GFDL, and HadGEM).\nArgonne then took the average of each daily average wind speed for a given year (e.g. 2045) and within a given time period / scenario (e.g. mid-century RCP4.5) and for a given climate model (e.g. CCSM), which produced the annual average wind speed for that scenario’s model year, such as CCSM’s estimate of annual average wind speeds in 2045 under climate scenario RCP4.5.\nThis process was repeated for each year within a given time period / scenario.\nThe average of these values was taken to produce the ensemble mean of the annual average wind speed (in mph) for each time period / scenario."
  },
  {
    "objectID": "qmd/ClimRR/definitions.html#consecutive-days-with-no-precipitation",
    "href": "qmd/ClimRR/definitions.html#consecutive-days-with-no-precipitation",
    "title": "Climate Variables",
    "section": "Consecutive Days With No Precipitation",
    "text": "Consecutive Days With No Precipitation\nEach climate model estimates an amount of precipitation (whether rain, snow, sleet, or ice) that occurs every 3 hours across the entire modeled time period (i.e. every 3 hours, of every day, for all modeled years).\nThese 3-hour precipitation estimates were used to calculate the daily precipitation quantities by adding all 8 precipitation readings for each day of a given year (e.g. 2045) within a given time period / scenario (e.g. mid-century RCP4.5) and for a given climate model (e.g. CCSM).\nThis process produced the total daily precipitation for every day in a scenario’s model year, such as CCSM’s daily estimates of total precipitation for the year 2045 under climate scenario RCP4.5.\nUsing this information, Argonne identified the greatest number of consecutive days in which no precipitation occurred (i.e. the total daily precipitation quantity equaled zero) for that scenario’s model year (e.g. for the year 2045 under scenario RCP4.5, the highest number of consecutive days without any precipitation was X).\nThis process was repeated for each year within a given time period / scenario (e.g. 2046, 2047 and so forth) across all three climate models (CCSM, GFDL, and HadGEM) producing 10 yearly values for each model, with each value representing the longest consecutive span with no precipitation for that year.\nOf the 10 yearly values for each climate model, the maximum value was selected (e.g. the decadal maximum). This resulted in 3 values for each climate model’s 10 years of data.\nThe average of these maximum of the maxima was then taken to produce the ensemble mean of the decade’s highest number of consecutive days without precipitation in a single year."
  },
  {
    "objectID": "qmd/ClimRR/definitions.html#degree-days",
    "href": "qmd/ClimRR/definitions.html#degree-days",
    "title": "Climate Variables",
    "section": "Degree Days",
    "text": "Degree Days"
  },
  {
    "objectID": "qmd/ClimRR/definitions.html#temperature-annual",
    "href": "qmd/ClimRR/definitions.html#temperature-annual",
    "title": "Climate Variables",
    "section": "",
    "text": "Each climate model generates temperature readings every 3 hours, or 8 temperature readings per day.\nThe maximum daily temperature refers to the highest of these 8 readings, which often occurs in the middle of the daytime and is comparable to the ‘high temperature’ in a daily weather forecast.\nSimilarly, the minimum daily temperature refers to the lowest of these 8 readings, which often occurs overnight and is comparable to the ‘low temperature’ in a daily weather forecast.\nArgonne calculated the annual average of both the maximum and minimum daily temperatures.\nThese daily high / low readings were then used to calculate the annual average maximum or minimum daily temperature for that scenario’s model year (e.g. the average max daily temperature for 2045 using the CCSM model under RCP4.5).\nThis process was repeated for each year within a given time period / scenario (e.g. 2046, 2047, and so forth) across all three climate models (CCSM, GFDL, and HadGEM).\nFinally, the 30 individual annual averages for a given time period/scenario were themselves averaged, producing a multi-model ensemble mean that represents the annual average of the maximum or minimum daily temperature for a given time period / scenario."
  }
]